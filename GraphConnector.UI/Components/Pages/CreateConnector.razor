@page "/createConnector"

@inject IConfiguration configuration
@inject GraphConnectorApiClient apiClient
@using GraphConnector.Library.Enums
@using GraphConnector.Library.Responses
@using GraphConnector.UI.Services
@rendermode InteractiveServer

<h3>Create Graph Connector</h3>

<table>
    <tr>
        <td><label for="ConnectorName">Connector Name</label></td>
        <td><input type="text" id="ConnectorName" @bind="ConnectorName" /></td>
    </tr>
    <tr>
        <td><label for="ConnectorDescription">Connector Description</label></td>
        <td><input type="text" id="ConnectorDescription" @bind="ConnectorDescription" /></td>
    </tr>
    <tr>
        <td><label for="ConnectorId">Connector Id</label></td>
        <td><input type="text" id="ConnectorId" @bind="ConnectorId" /></td
    </tr>
    <tr>
        <td><label for="FeedUrl">Feed Url</label></td>
        <td><input type="text" id="FeedUrl" @bind="FeedUrl" /></td
    </tr>
</table>

<br />
<p>
    <button class="btn btn-primary" @onclick="CreateGraphConnector">Create Connector</button>
</p>
<br />
<div>
    Operation status: @Status - Last checked: @LastStatusDate
</div>

@code {
    private string ConnectorName;
    private string ConnectorDescription;
    private string ConnectorId;
    private string FeedUrl;
    private string Status;
    private DateTimeOffset? LastStatusDate;

    private System.Timers.Timer timer;

    private async Task CreateGraphConnector()
    {
        QueueConnectionRequest request = new QueueConnectionRequest
            {
                Action = ConnectionAction.Create,
                ConnectorId = ConnectorId,
                ConnectorName = ConnectorName,
                ConnectorDescription = ConnectorDescription,
                FeedUrl = FeedUrl
            };

        await apiClient.QueueConnectionRequestAsync(request);

        timer = new System.Timers.Timer(TimeSpan.FromSeconds(15));
        timer.Elapsed += async (sender, e) =>
        {
            await CheckOperationStatus();
        };
        timer.Start();
    }

    public async Task CheckOperationStatus()
    {
        var result = await apiClient.CheckOperationprogressAsync();
        switch (result.Status)
        {
            case OperationStatus.Completed:
                Status = "Completed";
                timer.Stop();
                break;
            case OperationStatus.InProgress:
                Status = "In Progress";
                break;
        }

        LastStatusDate = result.LastStatusDate;
        await InvokeAsync(StateHasChanged);
    }
}
