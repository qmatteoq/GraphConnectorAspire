@page "/createConnector"

@inject IConfiguration configuration
@inject GraphConnectorApiClient apiClient
@using GraphConnector.Library.Responses
@using GraphConnector.UI.Services
@rendermode InteractiveServer

<h3>Create Connector</h3>

<div>
    <label for="ConnectorName">Connector Name</label>
    <input type="text" id="ConnectorName" @bind="ConnectorName" />
</div>

<div>
    <label for="ConnectorDescription">Connector Description</label>
    <input type="text" id="ConnectorDescription" @bind="ConnectorDescription" />
</div>

<div>
    <label for="ConnectorId">Connector Id</label>
    <input type="text" id="ConnectorId" @bind="ConnectorId" />
</div>
<div>
    <label for="FeedUrl">Feed Url</label>
    <input type="text" id="FeedUrl" @bind="FeedUrl" />
</div>

<br />
<p>
    <button class="btn btn-primary" @onclick="CreateGraphConnector">Create Connector</button>
</p>
<br />
<div>
    Operation status: @OperationStatus - Last checked: @LastStatusDate
</div>

@code {
    private string ConnectorName;
    private string ConnectorDescription;
    private string ConnectorId;
    private string FeedUrl;
    private string OperationStatus;
    private DateTimeOffset LastStatusDate;

    private System.Timers.Timer timer;

    private async Task CreateGraphConnector()
    {
        QueueConnectionRequest request = new QueueConnectionRequest
            {
                Action = "create",
                ConnectorId = ConnectorId,
                ConnectorName = ConnectorName,
                ConnectorDescription = ConnectorDescription,
                FeedUrl = FeedUrl
            };

        await apiClient.QueueConnectionRequestAsync(request);

        timer = new System.Timers.Timer(TimeSpan.FromSeconds(15));
        timer.Elapsed += async (sender, e) =>
        {
            await CheckOperationStatus();
        };
        timer.Start();
    }

    public async Task CreateSchema()
    {
        QueueSchemaRequest request = new QueueSchemaRequest
            {
                Action = "create",
                ConnectorId = ConnectorId
            };

        await apiClient.QueueSchemaRequestAsync(request);
    }

    public async Task UploadContent()
    {
        QueueContentRequest request = new QueueContentRequest
            {
                Action = "create",
                ConnectorId = ConnectorId,
                FeedUrl = FeedUrl
            };

        await apiClient.QueueContentRequestAsync(request);
    }

    public async Task CheckOperationStatus()
    {
        var result = await apiClient.CheckOperationprogressAsync();
        OperationStatus = result.Status;
        LastStatusDate = result.LastStatusDate;
        if (result.Status == "Completed")
        {
            timer.Stop();
        }
        await InvokeAsync(StateHasChanged);
    }
}
